import { apiRequestUrls } from "../config/apiConfig";
import { Api } from "../services/apiService";

export const getProfileVerticalTimeline = (refID) => {
    return Api.post(apiRequestUrls.getProfileVerticalTimeline + refID);
};

export const getAccountDetails = (clientID) => {
    const postObject = {
        ClientID: clientID,
        //BusinessDate: bDate
    }
    return Api.post(apiRequestUrls.getAccountDetails, { data: postObject });
};

export const getProfileAttachmentDetails = (progName,refID) => {
    // return Api.get(apiRequestUrls.getProfileAttachmentDetails + refID);
  return Api.get(apiRequestUrls.getAttachmentDetails(progName, refID));
    
};

export const getCommonCustomerDetails = (refID) => {
    return Api.get(apiRequestUrls.getCommonCustomerDetails + refID);
};

export const getProfileMiscellaneous = (progName,refID) => {
    // return Api.get(apiRequestUrls.getProfileMiscellaneous + refID);
    return Api.get(apiRequestUrls.getMiscellaneousDetails(progName, refID));
};

export const getProspectRelations = (refID) => {
    const postObject = {
        RefType: "CLIENTADD",
        RefID: refID
    }
    return Api.post(apiRequestUrls.getProspectRelations, { data: postObject });
};
export const clientRelations = (refID) => {
    return Api.post(apiRequestUrls.clientRelations + refID);
};
export const getCustomerDetails = (refID) => {
    const postObject = {
        RefType: "CLIENTADD",
        RefID: refID
    };
    return Api.post(apiRequestUrls.getCustomerDetails, { data: postObject });
};

export const downloadAttachments = (refID, id) => {
    const postObject = {
        ID: [id],
        RefType: "CLIENTADD",
        RefID: refID
    }
    return Api.post(apiRequestUrls.downloadAttachments, { data: postObject });
};
export const uploadFiles = (refID, clientAdd) => {
    const postObject = {
        data: [{
            RefType: "CLIENTADD",
            RefId: refID,
            FileDescription: "ClIentAdd.txt",
            FileName: clientAdd,
            FileString: "",
            MimeType: "text/plain",
            FileSize: "20KB",
            SessionId: ""
        },
        {
            RefType: "PROSPECTADD",
            RefId: refID,
            FileDescription: "ProspectList.txt",
            FileName: clientAdd,
            FileString: "",
            MimeType: "text/plain",
            FileSize: "20KB",
            SessionId: ""
        }]
    };
    return Api.post(apiRequestUrls.uploadFiles, { data: postObject });
};

export const getDocumentDetails = (refID) => {
    const postObject = {
        CustomerType: "I",
        CustomerCategory: "R",
        ResidentialStatus: "RD",
        RefID: refID,
    }
    return Api.post(apiRequestUrls.getDocumentDetails, { data: postObject });
};

export const getClientAccountDetailsByID = (refID) => {
    const postObject = {
        RefID: refID
    }
    return Api.post(apiRequestUrls.getClientAccountDetailsByID, { data: postObject });
};
